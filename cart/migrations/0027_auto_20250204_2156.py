# Generated by Django 5.1.4 on 2025-02-04 20:56

from decimal import ROUND_HALF_UP, Decimal

from django.db import migrations, models


def set_bouquet_taxes(apps, schema_editor):
    OrderBouquets = apps.get_model("cart", "OrderBouquets")
    Bouquets = apps.get_model("catalogue", "Bouquet")
    TaxPercent = apps.get_model("catalogue", "TaxPercent")
    Order = apps.get_model("cart", "Order")

    for order_bouquet in OrderBouquets.objects.all():
        if order_bouquet.product_id:
            bouquet = Bouquets.objects.filter(id=order_bouquet.product.id).first()
            if bouquet:
                order = Order.objects.get(id=order_bouquet.order.id)
                has_discount = bouquet.discount and (
                    order.created_at < bouquet.discount_expiration_datetime
                )
                tax_percent = Decimal(
                    TaxPercent.objects.get(id=bouquet.tax_percent.id).value
                )

                if has_discount:
                    discount_factor = Decimal(1) - (Decimal(bouquet.discount) / 100)
                    discounted_price = (bouquet.price * discount_factor).quantize(
                        Decimal("0.01"),
                        rounding=ROUND_HALF_UP,
                    )
                else:
                    discounted_price = bouquet.price

                tax_price_discounted = (
                    discounted_price * (Decimal(1) + tax_percent / 100)
                ).quantize(
                    Decimal("0.01"),
                    rounding=ROUND_HALF_UP,
                )

                order_bouquet.taxes = tax_price_discounted - discounted_price
                order_bouquet.save()


def set_product_taxes(apps, schema_editor):
    OrderProducts = apps.get_model("cart", "OrderProducts")
    Product = apps.get_model("catalogue", "Product")
    TaxPercent = apps.get_model("catalogue", "TaxPercent")
    Order = apps.get_model("cart", "Order")

    for order_product in OrderProducts.objects.all():
        if order_product.product_id:
            product = Product.objects.filter(id=order_product.product.id).first()
            if product:
                order = Order.objects.get(id=order_product.order.id)
                has_discount = product.discount and (
                    order.created_at < product.discount_expiration_datetime
                )
                tax_percent = Decimal(
                    TaxPercent.objects.get(id=product.tax_percent.id).value
                )

                if has_discount:
                    discount_factor = Decimal(1) - (Decimal(product.discount) / 100)
                    discounted_price = (product.price * discount_factor).quantize(
                        Decimal("0.01"),
                        rounding=ROUND_HALF_UP,
                    )
                else:
                    discounted_price = product.price

                tax_price_discounted = (
                    discounted_price * (Decimal(1) + tax_percent / 100)
                ).quantize(
                    Decimal("0.01"),
                    rounding=ROUND_HALF_UP,
                )

                order_product.taxes = tax_price_discounted - discounted_price
                order_product.save()


class Migration(migrations.Migration):

    dependencies = [
        ("cart", "0026_rename_product_price_orderbouquets_base_price_and_more"),
    ]

    operations = [
        migrations.RunPython(set_bouquet_taxes),
        migrations.AddField(
            model_name="orderproducts",
            name="taxes",
            field=models.DecimalField(
                decimal_places=2,
                default=0,
                max_digits=10,
                verbose_name="Всего заплаченных налогов",
            ),
            preserve_default=False,
        ),
        migrations.RunPython(set_product_taxes),
    ]
