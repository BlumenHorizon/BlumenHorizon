from django.contrib.auth import get_user_model
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.translation import gettext_lazy as _
from telegram.helpers import escape_markdown

from catalogue.models import Bouquet, Product, generate_sku
from core.base_models import TimeStampAdbstractModel
from tg_bot import send_message_to_telegram


class Order(TimeStampAdbstractModel, models.Model):
    STATUS_CHOICES = [
        ("processing", _("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")),
        ("declined", _("–û—Ç–∫–∞–∑–∞–Ω")),
        ("awaiting_payment", _("–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")),
        ("shipping", _("–í –¥–æ—Å—Ç–∞–≤–∫–µ")),
        ("delivered", _("–î–æ—Å—Ç–∞–≤–ª–µ–Ω")),
    ]
    ADDRESS_FORM_CHOICES = [
        ("Mr.", _("–£–≤–∞–∂–∞–µ–º—ã–π")),
        ("Mrs.", _("–£–≤–∞–∂–∞–µ–º–∞—è")),
    ]
    user = models.ForeignKey(
        get_user_model(),
        related_name="orders",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        on_delete=models.PROTECT,
        null=True,
        blank=False,
    )
    session_key = models.CharField(max_length=255)
    clarify_address = models.BooleanField(default=False, verbose_name="–£—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å?")
    country = models.CharField(verbose_name="–°—Ç—Ä–∞–Ω–∞", max_length=40)
    city = models.CharField(verbose_name="–ì–æ—Ä–æ–¥", max_length=40)
    email = models.EmailField(verbose_name="–ü–æ—á—Ç–∞")
    address_form = models.CharField(
        max_length=20,
        choices=ADDRESS_FORM_CHOICES,
        default="Mr.",
        verbose_name="–§–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—á–∏–∫—É",
    )
    name = models.CharField(verbose_name="–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞", max_length=80)
    postal_code = models.CharField(
        verbose_name="–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", max_length=40, null=True, blank=True
    )
    street = models.CharField(
        verbose_name="–£–ª–∏—Ü–∞", max_length=255, null=True, blank=True
    )
    building = models.CharField(
        verbose_name="–ó–¥–∞–Ω–∏–µ", max_length=40, null=True, blank=True
    )
    flat = models.CharField(
        verbose_name="–ö–≤–∞—Ä—Ç–∏—Ä–∞/–æ—Ñ–∏—Å", max_length=40, null=True, blank=True
    )
    delivery_date = models.DateField(verbose_name="–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    delivery_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")
    message_card = models.TextField(
        verbose_name="–ó–∞–ø–∏—Å–∫–∞ –∫ –±—É–∫–µ—Ç—É", max_length=10000, null=True, blank=True
    )
    instructions = models.TextField(
        verbose_name="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ", max_length=800, null=True, blank=True
    )
    recipient_address_form = models.CharField(
        max_length=20,
        choices=ADDRESS_FORM_CHOICES,
        default="Mr.",
        verbose_name="–§–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é",
    )
    recipient_name = models.CharField(verbose_name="–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è", max_length=80)
    recipient_phonenumber = models.CharField(
        verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", max_length=30
    )
    is_recipient = models.BooleanField(
        default=False, verbose_name="–ó–∞–∫–∞–∑—á–∏–∫ - –ø–æ–ª—É—á–∞—Ç–µ–ª—å?"
    )
    is_surprise = models.BooleanField(
        default=False, verbose_name="–î–æ—Å—Ç–∞–≤–∫–∞ —Å —Å—é—Ä–ø—Ä–∏–∑–æ–º?"
    )
    code = models.CharField(
        max_length=60, verbose_name="–ö–æ–¥ –∑–∞–∫–∞–∑–∞", default=generate_sku
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default="awaiting_payment",
        verbose_name="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
    )
    sub_total = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name=_("–ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"),
        help_text="–ë–µ–∑ –Ω–∞–ª–æ–≥–∞",
    )
    tax = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name=_("–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"),
        help_text="–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ª–æ–≥–∞",
    )
    tax_percent = models.IntegerField(
        validators=(
            MinValueValidator(0),
            MaxValueValidator(100),
        ),
        verbose_name=_("–ù–î–°"),
        help_text="%",
        default=0,
    )
    grand_total = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name=_("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"),
        help_text="–° –Ω–∞–ª–æ–≥–æ–º",
    )
    language_code = models.CharField(
        max_length=2,
        verbose_name="–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ"
    )

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

    def __str__(self):
        return f"{self.code} - {self.status}"
    



@receiver(post_save, sender=Order)
def order_created(sender: Order, instance: Order, created, **kwargs):
    if created:
        order = instance
        text = (
            f"*–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!* üéâ\n\n"
            f"*ID –∑–∞–∫–∞–∑–∞*: `{order.id}`\n"
            f"*–°—Ç–æ–∏–º–æ—Å—Ç—å*: `{order.grand_total} EUR`\n"
            f"*–°—Ç—Ä–∞–Ω–∞*: `{escape_markdown(order.country)}`\n"
            f"*–ì–æ—Ä–æ–¥*: `{escape_markdown(order.city)}`\n\n"
            f"–í–ø–µ—Ä—ë–¥ –∑–∞ —Ä–∞–±–æ—Ç—É! üöÄ"
        )

        send_message_to_telegram(text)


class OrderItem(models.Model):
    product_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞",
    )
    product_discount = models.IntegerField(
        validators=(
            MinValueValidator(0),
            MaxValueValidator(100),
        ),
        verbose_name="–°–∫–∏–¥–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç",
        null=True,
        default=0,
    )
    product_discount_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ c–æ —Å–∫–∏–¥–∫–æ–π",
    )
    product_tax_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–∞–ª–æ–≥–æ–º",
    )
    product_tax_price_discounted = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –∏ –Ω–∞–ª–æ–≥–æ–º",
    )
    quantity = models.IntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞")

    class Meta:
        abstract = True


class OrderProducts(TimeStampAdbstractModel, OrderItem):
    order = models.ForeignKey(
        Order, related_name="products", verbose_name="–ó–∞–∫–∞–∑", on_delete=models.PROTECT
    )
    product = models.ForeignKey(
        Product, related_name="orders", verbose_name="–ü—Ä–æ–¥—É–∫—Ç", on_delete=models.PROTECT
    )

    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑–µ"

    def __str__(self):
        return f"{self.pk}"


class OrderBouquets(TimeStampAdbstractModel, OrderItem):
    order = models.ForeignKey(
        Order, related_name="bouquets", verbose_name="–ó–∞–∫–∞–∑", on_delete=models.PROTECT
    )
    product = models.ForeignKey(
        Bouquet, related_name="orders", verbose_name="–ë—É–∫–µ—Ç", on_delete=models.PROTECT
    )

    class Meta:
        verbose_name = "–ë—É–∫–µ—Ç –≤ –∑–∞–∫–∞–∑–µ"
        verbose_name_plural = "–ë—É–∫–µ—Ç—ã –≤ –∑–∞–∫–∞–∑–µ"

        def __str__(self):
            return f"{self.pk}"
