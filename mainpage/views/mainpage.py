from typing import Any, Callable

import requests
from django.core.cache import cache
from django.http import JsonResponse
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
from django.views.generic.base import TemplateView
from django.views.generic.edit import CreateView

from catalogue.models import (
    Bouquet,
    BouquetCategory,
    BouquetImage,
    Product,
    ProductCategory,
    ProductImage,
)
from core.services.dataclasses.related_model import RelatedModel
from core.services.mixins import CommonContextMixin
from core.services.mixins.canonicals import CanonicalLinksMixin
from core.services.mixins.common_context_mixin import CanonicalsContextMixin
from core.services.types import Limit, OrderedModelField
from core.services.utils.carts import get_carts
from core.services.utils.recommended_items import get_recommended_items_with_first_image

from ..forms import IndividualOrderForm
from ..models import MainPageModel, MainPageSeoBlock, MainPageSliderImages
from .types import Categories, RecommendedItems


class MainPageView(
    CommonContextMixin,
    CanonicalLinksMixin,
    CanonicalsContextMixin,
    TemplateView,
):
    template_name = "mainpage/index.html"
    http_method_names = ["get"]

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        return self.build_context(base_context=context)

    def build_context(self, base_context: dict[str, Any]) -> dict[str, Any]:
        """
        –†–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        :param base_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–æ–º.
        """
        base_context["slider_images"] = MainPageSliderImages.objects.filter(
            is_active=True
        ).all()

        base_context["recommended_bouquets"], base_context["recommended_products"] = (
            self.get_recommended_items_tuple(
                processor=get_recommended_items_with_first_image,
            )
        )
        base_context["products_cart"], base_context["bouquets_cart"] = get_carts(
            self.request.session
        )
        base_context["products_categories"], base_context["bouquets_categories"] = (
            self.get_categories_tuple()
        )

        # –§–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        # –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º AJAX-–∑–∞–ø—Ä–æ—Å–∞
        base_context["individual_order_form"] = IndividualOrderForm()
        base_context["seo_block"] = MainPageSeoBlock.objects.first()

        page_model = MainPageModel.objects.first()
        base_context["description"] = page_model.description
        base_context["meta_tags"] = page_model.meta_tags
        base_context["json_ld_description"] = page_model.json_ld_description
        base_context["elfsight_widget"] = self.get_elfsight_widget_js()
        return base_context

    @staticmethod
    def get_categories_tuple() -> Categories:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–∫–µ—Ç–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥ H1 —Ç–µ–≥–æ–º
        –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. [–ø—Ä–∏–º–µ—Ä](https://imgur.com/a/NRX4tKB)
        """
        products_categories = (
            ProductCategory.objects.filter(is_active=True)
            .prefetch_related("subcategories")
            .only(
                "name",
                "slug",
                "code_value",
                "subcategories__code_value",
                "subcategories__slug",
                "subcategories__name",
            )
        )
        bouquets_categories = (
            BouquetCategory.objects.filter(is_active=True)
            .prefetch_related("subcategories")
            .only(
                "name",
                "slug",
                "code_value",
                "subcategories__code_value",
                "subcategories__slug",
                "subcategories__name",
            )
        )
        return products_categories, bouquets_categories

    @staticmethod
    def get_recommended_items_tuple(
        processor: Callable[
            [
                Product | Bouquet,
                ProductImage | BouquetImage,
                list[RelatedModel],
                list[OrderedModelField],
                Limit,
            ],
            RecommendedItems,
        ],
    ) -> RecommendedItems:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.

        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±—É–∫–µ—Ç–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
        –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏ —Å–µ–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –∫ –ø–æ–∫—É–ø–∫–µ¬ª –∏
        ¬´–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∫ –±—É–∫–µ—Ç–∞–º¬ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).

        –í—ã–∑–æ–≤ processor —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π Product –∏ Bouquet –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø–æ–ª—è–º –≤ order_fields, –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π
        –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit.

        :param processor: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å, –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏,
                            —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ª–∏–º–∏—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –±—É–∫–µ—Ç—ã
                            —Å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
        :return: NamedTuple `RecommendedItems`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–∞ —Å–ø–∏—Å–∫–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
        """
        related_models = [
            RelatedModel(model="subcategory", fields=["slug", "name"]),
            RelatedModel(model="subcategory__category", fields=["slug"]),
            RelatedModel(model="tax_percent", fields=["value"]),
        ]
        recommended_bouquets = processor(
            model=Bouquet,
            image_model=BouquetImage,
            related_models=related_models,
            order_fields=[
                "-amount_of_orders",
                "-amount_of_savings",
            ],
        )
        recommended_products = processor(
            model=Product,
            image_model=ProductImage,
            related_models=related_models,
            order_fields=[
                "-amount_of_orders",
                "-amount_of_savings",
            ],
        )
        return recommended_bouquets, recommended_products

    @property
    def relative_url(self):
        return reverse_lazy("mainpage:offers")

    def get_elfsight_widget_js(self) -> None:
        cache_key = "elfsight_widget_result"
        cached_result = cache.get(cache_key)
        if cached_result is None:
            response = requests.get("https://static.elfsight.com/platform/platform.js")
            if response.status_code == 200:
                cached_result = response.text
                cache.set(cache_key, cached_result, 60 * 60 * 6)
        return cached_result


class IndividualOrderView(CreateView):
    """
    –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - —Ñ–æ—Ä–º–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞. –ù–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É
    —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∫ –±—É–∫–µ—Ç–∞–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º
    –æ–±—Ä–∞–∑–æ–º: [—Å—Å—ã–ª–∫–∞](https://imgur.com/a/zbbMyNw).

    –°—Ç–æ–∏—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å —ç—Ç—É —Ñ–æ—Ä–º—É –æ—Ç —Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–¥—É–∫—Ç–∞.
    –§–æ—Ä–º–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å", –æ–Ω–∞
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º –∏–¥—ë—Ç —Ä–µ—á—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏.
    """

    form_class = IndividualOrderForm
    http_method_names = ["post"]

    def form_valid(self, form: IndividualOrderForm):
        form.save(commit=True, user=self.request.user)
        return JsonResponse(
            {
                "detail": _("–ú—ã —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è, –∞ –ø–æ–∫–∞ –≤—ã–ø–µ–π—Ç–µ —á–∞—é üòä"),
                "status": "success",
            },
            status=201,
        )

    def form_invalid(self, form):
        return JsonResponse(
            {
                "detail": _("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É:"),
                "errors": form.errors.as_json(),
                "status": 400,
            },
            status=400,
        )

    def http_method_not_allowed(self, request, *args, **kwargs) -> JsonResponse:
        return JsonResponse(
            {
                "detail": _("–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST."),
                "status": 405,
            },
            status=405,
        )
